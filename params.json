{"name":"Random Maze Generator and Solver","tagline":"Find the shortest path out of a randomly generated maze. Rendered with canvas. Fully tested with Jasmine.","body":"# Random maze generator/solver\r\n\r\n## Overview\r\n\r\nThis is just a simple random maze generator and solver I wrote for fun that gets drawn over a canvas on the page. It is fully written in JavaScript and tested with Jasmine.\r\n\r\nPlease feel free to fork and make comments/suggestions! Thanks!\r\n\r\n## Implementation details\r\n\r\n### Maze Generation\r\n\r\nThe maze is generated using a [Graph](http://en.wikipedia.org/wiki/Graph_(data_structure)) structure and a recursive [depht-first search algorithm](http://en.wikipedia.org/wiki/Depth-first_search).\r\nAll graph nodes (cells) are connected by default. By connected, I mean there is a wall separating them in the maze. As we run the DFS algorithm\r\nto generate the maze, we start removing connections and store them in an array of removed edges in the Graph class.\r\n\r\nThe size and complexity of the maze can be configured setting different width/height for the canvas element and setting the ``horizCells`` and ``vertCells`` numbers in the Maze class.\r\n\r\n### Maze Solution\r\n\r\nWe're using the [A * Search Algorithm](http://en.wikipedia.org/wiki/A*_search_algorithm) to find the shortest path from the start to the end of the maze. We're assuming the start cell is always the top left one, and the end is the bottom right. You can change that, however, if you like.\r\n\r\n## Screenshots\r\n\r\n![maze](https://raw.github.com/felipecsl/random-maze-generator/master/maze.png)\r\n\r\n![solved maze](https://raw.github.com/felipecsl/random-maze-generator/master/solution.png)\r\n\r\n![specs](https://raw.github.com/felipecsl/random-maze-generator/master/specs.png)\r\n\r\n## License\r\n\r\nYou are free to reuse and/or modify this code however you like. \r\nIf you do so, please add a note referring to this original source and attribute the credits.","google":"UA-32887005-1","note":"Don't delete this file! It's used internally to help with page regeneration."}